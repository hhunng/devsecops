name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    name: Testing APIs
    runs-on: ubuntu-latest
    steps:
    - name: List directories in /home/runner/work
      run: |
        echo "Listing directories in /home/runner/work"
        ls -la /home/runner/work\

    - name: List directories in /home/runner/work/_actions
      run: |
        echo "Listing directories in /home/runner/work/_actions"
        ls -la /home/runner/work/_actions
        ls -la /home/runner/work/_actions/warchant

    - name: Code checkout
      uses: actions/checkout@v4

    - name: List directories in /home/runner/work
      run: |
        echo "Listing directories in /home/runner/work"
        ls -la /home/runner/work\

    - name: List directories in /home/runner/work/_actions
      run: |
        echo "Listing directories in /home/runner/work/_actions"
        ls -la /home/runner/work/_actions

    - name: List directories in current directory
      run: |
        pwd
        ls -la

    - name: Maven test
      run: mvn test

    - name: Checkstyle
      run: mvn checkstyle:checkstyle

    # Setup java 11 to be default (sonar-scanner requirement as of 5.x)
    - name: Set Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '11'

    # Setup sonar-scanner
    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v7

    # Run sonar-scanner
    - name: SonarQube Scan
      run: sonar-scanner -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.sources=src/ -Dsonar.junit.reportsPath=target/surefire-reports/ -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

  gitleaks:
    name: Gitleaks Scan
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Run Gitleaks
      id: gitleaks
      uses: DariuszPorowski/github-action-gitleaks@v2
      with:
        config: MyGitleaksConfigs/MyGitleaksConfig.toml

    - name: Upload Gitleaks JSON report to artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: gitleaks
        path: /artifacts/gitleaks.json


  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    steps:
    - name: Code checkout
      uses: actions/checkout@v4
    - name: full scan
      run: |
        semgrep \
          --sarif --output report.sarif \
          --metrics=off \
          --config="p/java"

    - name: full scan json
      run: semgrep scan --lang java --json-output=semgrep.json

    - name: save report as pipeline artifact
      uses: actions/upload-artifact@v3
      with:
        name: semgrep
        path: /artifacts/semgrep.json
      if: ${{ always() }}

  reports:
    needs: [semgrep, gitleaks]
    name: Upload reports
    runs-on: ubuntu-latest
    container:
      image: python

    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Download aritfact of Segrem
      uses: actions/download-artifact@v4
      with:
        name: semgrep
        path: /artifacts/semgrep.json

    - name: Download aritfact of Gitleaks
      uses: actions/download-artifact@v4
      with:
        name: gitleaks
        path: /artifacts/gitleaks.json

    - name: Var the artifact
      run: ls

