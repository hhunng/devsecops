name: DevSecOps Pipeline
on:
  push:
    branches:
    - staging

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: evangelion-registry
  EKS_CLUSTER: ex-terraform
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  Testing:
    name: Testing APIs
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Maven test
      run: mvn test

    - name: Checkstyle
      run: mvn checkstyle:checkstyle

    - name: Set Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v7

    - name: SonarQube Scan
      run: sonar-scanner -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.sources=src/ -Dsonar.junit.reportsPath=target/surefire-reports/ -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  gitleaks:
    name: Gitleaks Scan
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks

    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Run Gitleaks
      id: gitleaks
      run: |
        git config --global --add safe.directory '*'
        gitleaks detect --source . -v

    - name: Upload Gitleaks JSON report to artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: gitleaks
        path: gitleaks.json

  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    steps:
    - name: Code checkout
      uses: actions/checkout@v4
    - name: full scan
      run: |
        semgrep \
          --sarif --output report.sarif \
          --metrics=off \
          --config="p/java"

    - name: full scan json
      run: semgrep scan --lang java --json-output=semgrep.json

    - name: save report as pipeline artifact
      uses: actions/upload-artifact@v4
      with:
        name: semgrep
        path: semgrep.json
      if: ${{ always() }}

  dependencycheck:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4
    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
        project: 'test'
        path: '.'
        format: 'SARIF'
        out: 'reports'
        args: >
          --failOnCVSS 7 --enableRetired
    - name: save report as pipeline artifact
      uses: actions/upload-artifact@v4
      with:
        name: dependencycheck
        path: ${{github.workspace}}/reports/dependency-check-report.sarif
      if: ${{ always() }}

  reports:
    needs: [semgrep, gitleaks, dependencycheck]
    name: Upload reports
    runs-on: ubuntu-latest
    container:
      image: python

    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Download aritfact of Gitleaks
      id: gitleaks
      uses: actions/download-artifact@v4
      with:
        name: gitleaks
      continue-on-error: true

    - name: Download aritfact of Segrem
      uses: actions/download-artifact@v4
      with:
        name: semgrep

    - name: Pre-installed dependency
      #    - name: Download aritfact of Gitleaks
      #      uses: actions/download-artifact@v4
      #      with:
      #        name: gitleaks
      run: pip3 install requests

    - name: Download aritfact of Dependency Check OWASP
      uses: actions/download-artifact@v4
      with:
        name: dependencycheck

    - name: Push gitleaks report
      if: steps.gitleaks.outcome == 'success'
      run: |
        python3 upload-reports.py gitleaks.json ${{ secrets.DEFECT_TOKEN }}

    - name: Push reports
      run: |
        python3 upload-reports.py semgrep.json ${{ secrets.DEFECT_TOKEN }}
        python3 upload-reports.py dependency-check-report.sarif ${{ secrets.DEFECT_TOKEN }}

  registry:
    needs: reports
    name: Push Image to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-pf-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push the tagged docker image to Amazon ECR
      id: containerImage
      env:
        AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
        AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
      run: |
        docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/evangelion-registry:${{ github.run_number }} -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/evangelion-registry:latest -t docker.io/my-organization/my-app:${{ github.sha }} .
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/evangelion-registry:${{ github.run_number }}
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/evangelion-registry:latest


    - name: Run Trivy vulnerability scanner
      env:
        AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
        AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: docker.io/my-organization/my-app:${{ github.sha }}
        format: 'sarif'
        output: 'trivy.sarif'
        #exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

    - name: Upload trivy artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy
        path: trivy.sarif
      if: ${{ always() }}

  report-image:
    needs: registry
    name: Upload Trivy Scanning Report
    runs-on: ubuntu-latest
    container:
      image: python

    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Pre-installed dependency
      run: pip3 install requests

    - name: Download aritfact of Trivy
      id: trivy
      uses: actions/download-artifact@v4
      with:
        name: trivy
      continue-on-error: true

    - name: Push reports
      run: |
        python3 upload-reports.py trivy.sarif ${{ secrets.DEFECT_TOKEN }}

  DeployToEKS:
    needs: report-image
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Get Kube config file
      run: aws eks update-kubeconfig --region ${{ secrets.AWS_DEFAULT_REGION }} --name ${{ env.EKS_CLUSTER }}

    - name: Print config file
      run: cat ~/.kube/config

    - name: Delete existing regcred secret if it exists
      run: |
        kubectl delete secret regcred || echo "Secret does not exist"

    - name: Create regcred secret
      env:
        AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
        AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
      run: |
        kubectl create secret docker-registry regcred \
        --docker-server=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com \
        --docker-username=AWS \
        --docker-password=$(aws ecr get-login-password)

    - name: Deploy Helm
      uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
      env:
        AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
        AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        cluster-name: ${{ env.EKS_CLUSTER }}
        chart-path: helm/devsecopscharts
        namespace: default
        values: appimage=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/evangelion-registry,apptag=${{ github.run_number }}
        name: devsecopspipeline
